{"version":3,"sources":["components/Buttons/Button.module.css","components/PopUp/PopUp.module.css","components/Header/Header.module.css","redux/reducer.js","components/Buttons/Button.jsx","components/PopUp/PopUp.jsx","components/DescriptionTask/DescriptionTask.jsx","components/MainContent/MainContent.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","redux/store.js","index.js","components/MainContent/MainContent.module.css","components/DescriptionTask/DescriptionTask.module.css"],"names":["module","exports","initialState","alerts","id","title","styles","border","popUpAlerts","addWindow","object","type","clearWindow","reducer","state","action","newArray","filter","pop","Button","props","className","buttons","style","onClick","PopUp","DescriptionTask","description","line","connect","main","showWindow","dispatch","data","Date","valueOf","setTimeout","map","al","i","key","popUp","container","popUpContainer","Header","header","App","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99c2ef39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__1a98v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pop\":\"PopUp_pop__3b1oN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2buPD\"};","const ADD_WINDOW = 'ADD_WINDOW';\r\nconst CLEAR_WINDOW = 'CLEAR_WINDOW';\r\n\r\n\r\nconst initialState = {\r\n    alerts: [\r\n        {id: 1, title: 'Success', styles: {border: '2px solid green'}},\r\n        {id: 2, title: 'Warning', styles: {border: '2px solid yellow'}},\r\n        {id: 3, title: 'Error', styles: {border: '2px solid red'}}\r\n    ],\r\n    popUpAlerts: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_WINDOW: {\r\n            return {\r\n                ...state,\r\n                popUpAlerts: [\r\n                    ...state.popUpAlerts,\r\n                    action.object\r\n                ]\r\n            }\r\n        }\r\n        case CLEAR_WINDOW: {\r\n            let newArray = state.popUpAlerts.filter(pop => pop.id !== action.id);\r\n            return {\r\n                ...state,\r\n                popUpAlerts: newArray\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const showWindow = (styles, title) => (dispatch) => {\r\n    const data = {\r\n        id: new Date().valueOf(),\r\n        styles,\r\n        title\r\n    };\r\n    dispatch(addWindow(data));\r\n    setTimeout(() => {\r\n        dispatch(clearWindow(data.id))\r\n    }, 3000)\r\n};\r\n\r\nexport const addWindow = (object) => ({type: ADD_WINDOW, object});\r\nexport const clearWindow = (id) => ({type: CLEAR_WINDOW, id});\r\n\r\nexport default reducer;","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\n\r\nconst Button = (props) => {\r\n\r\n    return <button className={styles.buttons}\r\n                   style={props.styles}\r\n                   onClick={() => {props.addWindow(props.styles, props.title)}}>\r\n        {props.title}\r\n    </button>\r\n\r\n\r\n};\r\n\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './PopUp.module.css';\r\n\r\n\r\nconst PopUp = (props) => {\r\n    debugger\r\n\r\n    return <div className={styles.pop} style={props.styles}>\r\n                 {props.title}\r\n            </div>\r\n};\r\n\r\nexport default PopUp;","import React from 'react';\r\nimport styles from './DescriptionTask.module.css';\r\n\r\n\r\nconst DescriptionTask = () => {\r\n    return <article className={styles.description}>\r\n        <p>There are 3 buttons:</p>\r\n        <ul>\r\n            <li>Success</li>\r\n            <li>Warning</li>\r\n            <li>Error</li>\r\n        </ul>\r\n        <p>When you click on the button, an alert with the corresponding name pops up on the right\r\n            and after 3 seconds it disappears. </p>\r\n        <p>If you press several buttons at once or one several times,\r\n            Alerts are lined up and each after 3 seconds disappears with a shift up.</p>\r\n        <p>You can see the implementation of this task here.</p>\r\n        <div className={styles.line}/>\r\n        <p>Есть 3 кнопки:</p>\r\n        <ul>\r\n            <li>Success</li>\r\n            <li>Warning</li>\r\n            <li>Error</li>\r\n        </ul>\r\n        <p>При нажатии на кнопку, справа выскакивает оповещение с соответствующим названием\r\n            и через 3 секунды исчезает. </p>\r\n        <p>Если нажать сразу несколько кнопок или одну несколько раз,\r\n            оповещения выстраиваются в ряд и каждая через 3 секунды исчезает со сдвигом вверх.</p>\r\n        <p>Реализацию этой задачи вы можете увидеть здесь.</p>\r\n    </article>\r\n};\r\n\r\nexport default DescriptionTask;","import React from 'react';\r\nimport styles from './MainContent.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {showWindow} from \"../../redux/reducer\";\r\nimport Button from \"../Buttons/Button\";\r\nimport PopUp from \"../PopUp/PopUp\";\r\nimport DescriptionTask from \"../DescriptionTask/DescriptionTask\";\r\n\r\n\r\nconst MainContent = (props) => {\r\n    let addWindow = (styles, title) => {\r\n        return props.showWindow(styles, title)\r\n    };\r\n\r\n    let alerts = props.alerts.map((al, i) => <Button key={i} styles={al.styles}\r\n                                                     title={al.title}\r\n                                                     addWindow={addWindow}/>);\r\n\r\n    let popUp = props.popUpAlerts.map((pop, i) => <PopUp key={i} styles={pop.styles}\r\n                                                         title={pop.title}/>\r\n    );\r\n\r\n    return <article className={styles.container}>\r\n        <div className={styles.main}>\r\n            {alerts}\r\n        </div>\r\n        <DescriptionTask/>\r\n        <div className={styles.popUpContainer}>\r\n            {popUp}\r\n        </div>\r\n    </article>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    alerts: state.main.alerts,\r\n    popUpAlerts: state.main.popUpAlerts,\r\n});\r\n\r\nexport default connect(mapStateToProps, {showWindow})(MainContent);","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return <header className={styles.header}>\r\n        <h1>TEST TASK</h1>\r\n    </header>\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport MainContent from \"./components/MainContent/MainContent\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <MainContent/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducer from \"./reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    main: reducer,\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// window.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainContent_container__246DS\",\"main\":\"MainContent_main__2Mp6o\",\"popUpContainer\":\"MainContent_popUpContainer__SzxNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"DescriptionTask_description__2dlc0\",\"line\":\"DescriptionTask_line___fe_T\"};"],"sourceRoot":""}